#macro(people_content)
    <link rel="stylesheet" href="/css/people.css">
    <h3>People</h3>
    <div>
        <button onclick="retrievePersonList();">Refresh</button>
        <button onclick="selectPerson(null);">Add New Person</button>
    </div>

    <div id="people-container">
        <div id="people-list-container">

        </div>
        <div id="person-edit-container" data-person-id="null">
            <h2 class="person-edit-header"></h2>

            <div class="edit-container-table">
                <label>First Name:</label><input class="first-name" type="text" value="" />
                <label>Middle Names:</label><input class="middle-names" type="text" value="" />
                <label>Last Name:</label><input class="last-name" type="text" value="" />
                <label>Title:</label><input class="title" type="text" value="" />

                <button class="btn-update" onclick="sendUpdatePerson();">Update</button>
                <button class="btn-remove" onclick="deletePerson();">Delete</button>
                <button class="btn-add" onclick="sendAddPerson();">Add New</button>
            </div>
        </div>
    </div>

    <script>
        let peopleListContainer = $("#people-list-container");
        let personEditContainer = $("#person-edit-container");

        let personListIndex = 0;
        let personListAmount = 10;

        let selectedPerson = null;

        selectPerson(null);
        retrievePersonList();

        function selectPerson(personSelector) {
            if (typeof personSelector === "string" || personSelector instanceof String ||
                typeof personSelector === "number" || personSelector instanceof Number) {
                personSelector = peopleListContainer.find(`.person-list-record[data-id="${personSelector}"]`)
                if (personSelector.length === 0)
                    personSelector = null;
            }
            if (selectedPerson !== null) {
                selectedPerson.removeClass("selected");
                if (personSelector !== null && personSelector.data("id") === selectedPerson.data("id")) {
                    personSelector = null;
                }
            }
            selectedPerson = personSelector;
            if (selectedPerson === null) {
                setContainerAddMode(personEditContainer);
            } else {
                selectedPerson.addClass("selected");
                let personId = selectedPerson.data("id");
                retrievePerson(personId, function (person) {
                    setContainerUpdateMode(personEditContainer, person);
                });
            }
        }

        function setContainerAddMode(container) {
            container.data("id", "null");

            container.find(".person-edit-header").html("Add New Person");

            container.find(".first-name").val("");
            container.find(".middle-names").val("");
            container.find(".last-name").val("");
            container.find(".title").val("");

            container.find(".btn-update").hide();
            container.find(".btn-add").show();
            container.find(".btn-remove").hide();
        }

        function setContainerUpdateMode(container, person) {
            container.data("id", person["personId"]);

            container.find(".person-edit-header").html(`${person["firstName"]} ${person["lastName"]} (edit)`);

            container.find(".first-name").val(person["firstName"]);
            container.find(".middle-names").val(person["middleNames"]);
            container.find(".last-name").val(person["lastName"]);
            container.find(".title").val(person["title"]);

            container.find(".btn-add").hide();
            container.find(".btn-update").show();
            container.find(".btn-remove").show();
        }

        function getPersonFromContainer(container) {
            let id = container.data("id");
            return {
                ...(!isNaN(id)) && {"personId": id},
                "firstName": container.find(".first-name").val(),
                "middleNames": container.find(".middle-names").val(),
                "lastName": container.find(".last-name").val(),
                "title": container.find(".title").val(),
            };
        }

        function deletePerson() {
            let person = getPersonFromContainer(personEditContainer);
            if (confirm(`Are you sure you want to delete ${person["firstName"]} ${person["lastName"]}?`)) {
                sendRemovePerson();
            }
        }

        function validatePerson(person) {
            let isValid = true;
            isValid &= person["firstName"] !== "";
            return isValid;
        }

        function retrievePersonList(onResponse) {
            runAjax("post", "/get_person_list_ranged", {"begin": personListIndex, "amount": personListAmount}, function(response) {
                peopleListContainer.empty();
                response["people"].forEach(function(person) {
                    peopleListContainer.append(`<p class="person-list-record" data-id="${person["personId"]}">${person["firstName"]} ${person["lastName"]}<\p>`);
                });
                peopleListContainer.find(".person-list-record").on("click", function() {
                    selectPerson($(this));
                });
                if (onResponse)
                    onResponse();
            });
        }

        function retrievePerson(personId, onResponse) {
            runAjax("post", "/get_person", {"personId": personId}, function(response) {
                onResponse(response["person"]);
            });
        }

        function sendAddPerson(onResponse) {
            let person = getPersonFromContainer(personEditContainer);
            console.log(person);
            if (validatePerson(person)) {
                runAjax("post", "/add_person", person, function(response) {
                    retrievePersonList();
                    console.log("Person added");
                    if (onResponse)
                        onResponse();
                });
            }
        }

        function sendUpdatePerson(onResponse) {
            let person = getPersonFromContainer(personEditContainer);
            if (validatePerson(person)) {
                runAjax("post", "/update_person", person, function(response) {
                    let id = selectedPerson.data("id");
                    selectPerson(null);
                    retrievePersonList(function() {
                        selectPerson(id);
                        console.log("Person updated");
                        if (onResponse)
                            onResponse();
                    });
                });
            }
        }

        function sendRemovePerson(onResponse) {
            let person = getPersonFromContainer(personEditContainer);
            runAjax("post", "/remove_person", {"personId": person["personId"]}, function(response) {
                retrievePersonList();
                selectPerson(null);
                console.log("Person removed");
                if (onResponse)
                    onResponse();
            });
        }
    </script>
#end
